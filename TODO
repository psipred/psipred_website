* 1) Psipred
    display the images
2) pGenTHREADER
    get the table of data and format appropriately
3) pDomTHREADER
    get the table of data and format appropriately
* 4) Disopred
     get and display the images
5) memsatsvm
    get images and data table
6) Bioserf
    get images and output data/pdb
7) Dompred
    get images and output data
8) FFPred-Human v3
    get images and output data
9) FFPRed-Fly v1
    get images and output data
10) genthreader
    get output table
11) MEMPACK
    tables and diagrams
12) Domserf
     tables and diagrams/pdb
13) MODELLER

13) Metsite
    diagrams/pdb

14) HSpred
    tables and pdb
15) Memembed
    tables and data
16) GenerateTDB
    output file

17) auto update the databases


How to add a service:

1) UPDATE TO ADD A NEW JOB TYPE TO THE BACKGROUND AA SERVICE

1) Update models.py request() model to add new BooleanField for the job
    memsatsvm_job = models.BooleanField(null=False, default=False)

2) Update forms.py to add new field and add the new field to fields=[]
   note how the attrs for the form element are ractive variables
        disopred_job = forms.BooleanField(label="DISOPRED3", required=False,
                                      widget=forms.CheckboxInput(
                                       attrs={'value': '{{disopred_job}}',
                                              'checked': '{{disopred_checked}}'
                                              }))
        fields = ('psipred_job', 'disopred_job', 'memsatsvm_job', 'input_data',
                  'job_name', 'email', )

3) migrate db changes
$ python manage.py makemigrations --settings=psipred_website.settings.dev
$ python manage.py migrate --settings=psipred_website.settings.dev

4) Update formgroup in template from line 87 templates/index.html
    {% if "MEMSAT-SVM" in field.label %}
        {{ field.errors }}
        {{ field.label_tag }}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{ field }}
    {% endif %}

5) Ensure you have a button in the vertical button group, from line 32
    {% templatetag openvariable %}#if memsatsvm_button{% templatetag closevariable %}
      <button on-click='memsatsvm_active' type="button" class="btn btn-default">MEMSAT-SVM</button>
    {% templatetag openvariable %}/if{% templatetag closevariable %}

6) Add resubmission checkbox, from line 165
      <div class="checkbox">
        <label for="id_memsat_job">MEMSAT-SVM:</label>
        <input id="id_memsat_job" name="memsat_job" value="memsat_job" type="checkbox" checked="{% ractivetag "memsat_checked" %}">
      </div>

7) Note the annotation panels line 123   <!-- Annotation panel --> add a new type for the new service
   Also requires a div for any plots
    {% templatetag openvariable %}#if results_panel_visible === 6 {% templatetag closevariable %}
    <div class="mm_plot"></div>
    <div class="waiting" intro="slide" outro="slide">{% ractivehtmltag "memsatsvm_waiting_message" %}</div>
    <div class="waiting_icon" intro="slide" outro="slide">{% ractivehtmltag "memsatsvm_waiting_icon" %}<br />{% ractivehtmltag "memsatsvm_time" %}</div>
    {% templatetag openvariable %}/if{% templatetag closevariable %}

NOW WE CAN UPDATE THE JAVASCRIPT

8) Update base vars and strings from line 54 var ractive = new Ractive({
      memsatsvm_checked: true,
      memsatsvm_button: false,
      memsatsvm_job: 'memsatsvm_job',
      memsatsvm_waiting_message: '<h2>Please wait for your MEMSAT_SVM job to process</h2>',
      memsatsvm_waiting_icon: '<object width="140" height="140" type="image/svg+xml" data="http://bioinf.cs.ucl.ac.uk/psipred_beta/static/images/gears.svg"/>',
      memsatsvm_time: 'Unknown',
9) Update how we handle the files that comeback at line 186 if(batch.state === 'Complete')
10) Update downloads strings from line 243
      if('memsatsvm' in downloads_info)
      {
        downloads_string = downloads_string.concat(downloads_info.memsatsvm.header);
        downloads_string = downloads_string.concat("<br />");
      }
11) Update header activation line 292 and redraw and divs
ractive.on( 'memsatsvm_active', function ( event ) {
  ractive.set( 'results_panel_visible', null );
  ractive.set( 'results_panel_visible', 4 );
  ractive.set( 'submission_widget_visible', 1 );
  if(ractive.get('diso_precision'))
  {
    biod3.genericxyLineChart(ractive.get('diso_precision'), 'pos', ['precision'], ['Black',], 'DisoNNChart', {parent: 'div.comb_plot', chartType: 'line', y_cutoff: 0.5, margin_scaler: 2, debug: false, container_width: 900, width: 900, height: 300, container_height: 300});
  }
});

12) Update submission checks line 318 ractive.on('submit', function(event) {
      let memsatsvm_job = this.get('memsatsvm_job');
      let memsatsvm_checked = this.get('memsatsvm_checked');
      verify_and_send_form(seq, name, email, psipred_checked, disopred_checked,
                       memsatsvm_checked, this);
13) Do the same for resubmitmission line 343 active.on('resubmit', function(event) {
      let memsatsvm_job = this.get('memsatsvm_job');
      let memsatsvm_checked = this.get('memsatsvm_checked');
      verify_and_send_form(subsequence, name, email, psipred_checked, disopred_checked,
                       memsatsvm_checked, this);
14) update results visibility toggles making sure your panel nubmer matches that in step 7 above, line 378
      if(previous_data.jobs.includes('memsatsvm'))
  {
      ractive.set('memsatsvm_button', true );
      ractive.set('results_panel_visible', 6);
  }

15) Update verify_and_send_form()
      if(memsatsvm_checked === true)
    {
      job_string = job_string.concat("memsatsvm,");
      ractive.set('memsatsvm_button', true);
    }

and
    else if(memsatsvm_checked === true && response)
    {
      ractive.set( 'results_visible', 2 );
      ractive.fire( 'memsatsvm_active' );
      draw_empty_annotation_panel();
    }

16) Update clearsettings() as per 8 and 11
17) Update process_file() to draw the new incoming data file type
